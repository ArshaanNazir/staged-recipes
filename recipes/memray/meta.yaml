{% set name = "memray" %}
{% set version = "1.0.3" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/memray-{{ version }}.tar.gz
  sha256: cfff403e1a25a61265547fe7ba696bd08bbbce93400444d66b4025cb4adc6e88

build:
  number: 0
  skip: true   # [py<37]
  entry_points:
    - memray3.7=memray.__main__:main
    - memray=memray.__main__:main
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  build:
    - {{ compiler('c') }}
  host:
    - cython
    - pip
    - python
  run:
    - python
    - jinja2    
    - rich <11.0.0
    - typing-extensions  # [py<38]

test:
  imports:
    - memray
    - memray._memray
  commands:
    - pip check
    - memray3.7 --help
    - memray --help
  requires:
    - pip

about:
  home: https://github.com/bloomberg/memray
  summary: A memory profiler for Python applications
  license: Apache-2.0
  license_file: LICENSE
  description: |
    <p align="center">
    <img src="https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/logo.png" width="70%">
    </p>

    ---

    ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/memray)
    ![PyPI - Implementation](https://img.shields.io/pypi/implementation/memray)
    ![PyPI](https://img.shields.io/pypi/v/memray)
    ![PyPI - Downloads](https://img.shields.io/pypi/dm/memray)
    [![Tests](https://github.com/bloomberg/memray/actions/workflows/build.yml/badge.svg)](https://github.com/bloomberg/memray/actions/workflows/build.yml)
    ![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)

    <p align="center"><img src="https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/output.png" alt="Memray output"></p>

    Memray is a memory profiler for Python. It can track memory allocations in Python code, in native extension
    modules, and in the Python interpreter itself. It can generate several different types of reports to help you
    analyze the captured memory usage data. While commonly used as a CLI tool, it can also be used as a library to
    perform more fine-grained profiling tasks.

    Notable features:

    - üïµÔ∏è‚Äç‚ôÄÔ∏è Traces every function call so it can accurately represent the call stack, unlike sampling profilers.
    - ‚Ñ≠ Also handles native calls in C/C++ libraries so the entire call stack is present in the results.
    - üèé Blazing fast! Profiling causes minimal slowdown in the application. Tracking native code is somewhat slower,
      but this can be enabled or disabled on demand.
    - üìà It can generate various reports about the collected memory usage data, like flame graphs.
    - üßµ Works with Python threads.
    - üëΩüßµ Works with native-threads (e.g. C++ threads in C extensions).

    Memray can help with the following problems:

    - Analyze allocations in applications to help discover the cause of high memory usage.
    - Find memory leaks.
    - Find hotspots in code which cause a lot of allocations.

    :fire: Note that Memray only works on Linux and cannot be installed on other platforms.

    **PyPI**: [https://pypi.org/project/memray/](https://pypi.org/project/memray/)

  doc_url: https://bloomberg.github.io/memray/
  dev_url: https://github.com/bloomberg/memray

extra:
  recipe-maintainers:
    - sugatoray
