
{% macro skip_winbuild(skip_build=False) %}
{%- if skip_build is defined %}
{%- if skip_build %}
skip: True  # [win]
{%- end if %}
{%- end if %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_umap_subpackage() %}
  ### umap_packages
  {% if use_umap_packages is defined %}
  {% if use_umap_packages or use_all_subpackages %}
  {% with subpackage_id = "umap" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "umap": base_packages + umap_packages
        - {{ name_ }} {{ version }}
        - umap-learn {{ libver_umap_learn }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_rasa_subpackage() %}
  ### rasa_packages
  {% if use_rasa_packages is defined %}
  {% if use_rasa_packages or use_all_subpackages %}
  {% with subpackage_id = "rasa" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      ## NOTE: rasa is not available on conda-forge
      {{ skip_winbuild(skip_build=skip_failing_winbuild) | indent(width=6) }}
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "rasa": base_packages + rasa_packages
        - {{ name_ }} {{ version }}
      run_constrained:
        # using run_constrained temporarily
        # until rasa is made available on
        # conda-forge channel.
        - rasa {{ libver_rasa }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_fasttext_subpackage() %}
  ### fasttext_packages
  {% if use_fasttext_packages is defined %}
  {% if use_fasttext_packages or use_all_subpackages %}
  {% with subpackage_id = "fasttext" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      ## NOTE: fasttext in NOT available for windows on conda-forge
      {{ skip_winbuild(skip_build=skip_failing_winbuild) | indent(width=6) }}
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "fasttext": base_packages + fasttext_packages
        - {{ name_ }} {{ version }}
        - fasttext {{ libver_fasttext }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_spacy_subpackage() %}
  ### spacy_packages
  {% if use_spacy_packages is defined %}
  {% if use_spacy_packages or use_all_subpackages %}
  {% with subpackage_id = "spacy" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "spacy": base_packages + spacy_packages
        - {{ name_ }} {{ version }}
        - spacy {{ libver_spacy }}
        - spacy-lookups-data {{ libver_spacy_lookups_data }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_s2v_subpackage() %}
  # s2v_packages
  {% if use_s2v_packages is defined %}
  {% if use_s2v_packages or use_all_subpackages %}
  {% with subpackage_id = "sense2vec" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # s2v_packages = ["sense2vec>=1.0.2"] + spacy_packages
        # "sense2vec": base_packages + s2v_packages
        - {{ pin_subpackage(name_ ~ "-spacy", exact=True) }}
        - sense2vec {{ libver_sense2vec }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_tf_subpackage() %}
  ### tf_packages
  {% if use_tf_packages is defined %}
  {% if use_tf_packages or use_all_subpackages %}
  {% with subpackage_id = "tfhub" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
    # NOTE: this throws error for windows build.
      {{ skip_winbuild(skip_build=skip_failing_winbuild) | indent(width=6) }}
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "tfhub": base_packages + tf_packages
        - {{ name_ }} {{ version }}
        - tensorflow {{ libver_tensorflow }}
        - tensorflow-hub {{ libver_tensorflow_hub }}
        # Adding the follwoing temporarily to fix a 
        # tensorflow-dependency version-mismatch issue.
        - absl-py {{ "~=0.10" }}
        - wrapt {{ "~=1.12.1" }}
      run_constrained:
        # NOTE: tensorflow-text is not available on conda-forge
        - tensorflow-text {{ libver_tensorflow_text }}
    test:
      imports:
        - {{ name_ }}
      # commands:
      #   - pip check  # [not win]
      # requires:
      #   - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_transformers_subpackage() %}
  ### transformers_dep
  {% if use_transformers_dep is defined %}
  {% if use_transformers_dep or use_all_subpackages %}
  {% with subpackage_id = "transformers" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      # NOTE: this throws error for windows build.
      {{ skip_winbuild(skip_build=skip_failing_winbuild) | indent(width=6) }}
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "transformers": base_packages + transformers_dep
        - {{ name_ }} {{ version }}
        - transformers {{ libver_transformers }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check  # [not win]
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}

# Place: Under "outputs" in meta.yaml
# DO NOT CHANGE INDENTATION INSIDE MACROS
{% macro embed_sentence_tfm_subpackage() %}
  # sentence_tfm_dep
  {% if use_sentence_tfm_dep is defined %}
  {% if use_sentence_tfm_dep or use_all_subpackages %}
  {% with subpackage_id = "sentence_tfm" %}
  - name: {{ name_ }}-{{ subpackage_id }}
    build:
      # NOTE: this throws error for windows build.
      {{ skip_winbuild(skip_build=skip_failing_winbuild) | indent(width=6) }}
      noarch: generic
      string: {{ build_num }}_{{ subpackage_id }}_extra
    requirements:
      run:
        # RECIPE: 
        # "transformers": base_packages + sentence_tfm_dep
        - {{ name_ }} {{ version }}
        - sentence-transformers {{ libver_sentence_transformers }}
    test:
      imports:
        - {{ name_ }}
      commands:
        - pip check  # [not win]
      requires:
        - pip
  {% endwith %}
  {% endif %}
  {% endif %}
{% endmacro %}