{% set name = "zenml" %}
{% set version = "0.10.0" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/zenml-{{ version }}.tar.gz
  sha256: b1cb502b9f9279ed363eaef4b168ecefa392e88a6f3b7a98df973d20b8a07416

build:
  number: 0
  noarch: python
  entry_points:
    - zenml = zenml.cli.cli:cli
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - python >=3.6,<3.10
    - poetry-core
  run:
    - python >=3.6,<3.10
    - absl-py
    - analytics-python >=1.4.0,<2.0.0
    - apache-beam >=2.30.0,<3.0.0
    - click >=8.0.1,<9.0.0
    - click-params >=0.3.0,<0.4.0
    - distro >=1.6.0,<2.0.0
    - gitpython >=3.1.18,<4.0.0
    - httplib2 >=0.19.1,<0.20
    - markupsafe ==1.1.1
    - nbconvert ==6.4.4
    - pandas >=1.1.5,<2.0.0
    - pydantic >=1.9.0,<2.0.0
    - pyparsing >=2.4.0,<3
    - python-dateutil >=2.8.1,<3.0.0
    - pyyaml >=5.4.1,<6.0.0
    - rich >=12.0.0,<13.0.0
    - sqlmodel >=0.0.6,<0.1.0
  run_constrained:
    # not available on conda-forge yet
    - ml-pipelines-sdk ==1.8.0

test:
  imports:
    - zenml
    - zenml.alerter
  commands:
    - pip check
    - zenml --help
  requires:
    - pip

about:
  home: https://zenml.io
  summary: 'ZenML: Write production-ready ML code.'
  license: Apache-2.0
  license_file: LICENSE
  description: |
    ## ðŸ‘€ What is ZenML?

    **ZenML** is an extensible, open-source MLOps framework for creating 
    portable, production-ready MLOps pipelines. Built to enable collaboration 
    among data scientists, ML Engineers, and MLOps Developers,
    it has a simple, flexible syntax, is **cloud-** and 
    **tool-agnostic**, and has interfaces/abstractions that are thoughtfully designed for 
    ML workflows. 

    At its core, **ZenML pipelines execute ML-specific workflows** from sourcing
    data to splitting, preprocessing, training, all the way to serving and monitoring 
    ML models in production. There are many built-in features to support
    common ML development tasks. ZenML is not here to replace the great tools that
    solve these individual problems. Rather, it offers an **extensible framework** and a
    standard abstraction to write and build your workflows.


    ## ðŸ¤– Why use ZenML?

    ZenML pipelines are designed to be written early on the development lifecycle.
    Data scientists can explore their pipelines as they develop towards production,
    switching stacks from local to cloud deployments with ease. You can read more
    about why we started building ZenML [on our
    blog](https://blog.zenml.io/why-zenml/). By using ZenML in the early stages of
    your project, you get the following benefits:

    - **Extensible** so you can build out the framework to suit your specific needs
    - **Reproducibility** of training and inference workflows
    - A **simple and clear** way to represent the steps of your pipeline in code
    - **Batteries-included integrations**: bring all your favorite tools together
    - Easy switch between local and cloud stacks
    - Painless **deployment and configuration** of infrastructure

    PyPI: [https://pypi.org/project/zenml/](https://pypi.org/project/zenml/)

  doc_url: https://docs.zenml.io/
  dev_url: https://github.com/zenml-io/zenml

extra:
  recipe-maintainers:
    - sugatoray
