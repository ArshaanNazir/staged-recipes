from typing import Dict, NoReturn, Optional
import os
import argparse
import json
from dataclasses import dataclass


@dataclass
class Defaults:
    REQUIREMENTS_FILEPATH: str = "requirements.txt"
    LIBSPEC_FILEPATH: str = "libspec.yaml"
    LIBSPEC_ROOT_NODE: Optional[str] = None

def load_requirements(path: str="requirements.txt") -> Dict[str, Dict[str, str]]:
    reqs = open(path, "r").readlines()

    lines = []
    for req in reqs:
        req = req.strip()
        if req and all(not req.startswith(x) for x in ["#", "//", "<!--"]):
            lines.append(req.strip().replace('"','').split(' = '))

    libs = dict((k,{'name': k, 'version': v}) for (k,v) in lines)
    del reqs, lines

    return libs

def create_libspec(libs: Dict, 
    path: str="libspec.yaml", 
    root_node: Optional[str]=None, 
    add_file_header: bool=False, 
    indent: Optional[int]=2
    ) -> NoReturn:
    with open(path, "w") as f:
        msg = ''
        if add_file_header:
            msg = "## THIS IS AN AUTOGENERATED FILE. DO NOT CHANGE ANYTHING HERE."
            msg_width = len(msg)
            msg += "\n##\n"
            msg += "##" + "-" * (msg_width - 4) + "##\n\n"
        if root_node is None:
            payload = libs
        else:
            payload = {root_node: libs}
        f.write(msg + json.dumps(payload, indent=indent))

def main():

    parser = argparse.ArgumentParser(
        # prog="compose", # sys.argv[0]
        description='Fetch package dependencies from a file.',
        allow_abbrev=True,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        add_help=True,
    )

    parser.add_argument(
        "-p", "--path", 
        type=str,
        default=Defaults.REQUIREMENTS_FILEPATH,
        help="Path to requirements' file.",
    )

    parser.add_argument(
        "-r", "--libspec_root", 
        type=str,
        default=Defaults.LIBSPEC_ROOT_NODE,
        help="The root node for saving libspec.",
    )

    parser.add_argument(
        "-l", "--libspec",
        # when not specified, defaults to False: "store_true"
        action="store_true",
        help="Path to library specification's .yaml file.",
    )

    parser.add_argument(
        "-v", "--verbose",
        # when not specified, defaults to False: "store_true"
        action="store_true",
        help="Increase output verbosity."
    )

    parser.add_argument(
        "-i", "--indent", 
        type=int,
        default=None,
        help="Path to requirements' file.",
    )

    args = parser.parse_args()

    return args

if __name__ == "__main__":
    """
    Example:

    >>> python3 fetch_requirements.py -p "requirements.txt" -l -v -i 2
    """
    args = main()
    libs = load_requirements(path=args.path)
    if args.indent is not None:
        args.indent = int(args.indent)
    payload = json.dumps(libs, indent=args.indent)
    if args.libspec:        
        create_libspec(
            libs, 
            path=Defaults.LIBSPEC_FILEPATH, 
            root_node=args.libspec_root,
            add_file_header=False, 
            indent=args.indent,
        )
    os.environ["PACKAGE_REQUIREMENTS_SPEC"] = payload
    if args.verbose:
        print(payload)
